// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono, Orbitron } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/providers/theme-provider";

// Import utilities and configurations to connect isolated modules
import "@/lib/config"; // Import for side effects to connect module
import "@/lib/monitoring/logger"; // Import for side effects to connect module

// Import additional modules to connect them to the application
import "@/lib/utils";
import "@/lib/dal";
import "@/lib/performance-optimization";
import "@/lib/advanced-monitoring";

// Import services to connect them
import "@/lib/services/automation-service";
import "@/lib/services/n8n-webhook-service";
import "@/lib/services/audit-logger";

// Import security modules
import "@/lib/security/encryption";
import "@/lib/security/filterSecurity";

// Import stores
import "@/lib/stores/auth-store";
import "@/lib/stores/automation-store";
import "@/lib/stores/app-store";

// Import repositories
import "@/lib/repositories/automation-repository";

// Import hooks
import "@/lib/hooks/useAutomations";
import "@/hooks/usePerformanceMonitor";
import "@/hooks/useOptimizedFiltering";
import "@/hooks/useFilterState";
import "@/hooks/useDebounce";
import "@/hooks/useAutomationState";

// Import data utilities
import "@/lib/data/mock-clients";
import "@/lib/data/mock-automations";

// Import utilities
import "@/lib/utils/date-formatting";

// Import quality modules
import "@/lib/quality/mutationTesting";
import "@/lib/quality/codeQualityMonitor";

// Import architecture validation
import "@/lib/architecture/designPatternValidator";

// Import accessibility modules
import "@/lib/accessibility/wcagAudit";
import "@/lib/accessibility/accessibilityFixes";

// Import memory modules
import "@/lib/memory/knowledgeMemorization";

// Import integration modules
import "@/lib/integration/integrationValidator";

// Import deployment modules
import "@/lib/deployment/rollbackManager";

// Import protocol modules
import "@/lib/protocol/avariceProtocolValidator";

// Import performance modules
import "@/lib/performance/filterBenchmarks";
import "@/lib/performance/webhook-performance-monitor";

// Import mobile modules
import "@/lib/mobile/mobileValidation";

// Import middleware
import "@/lib/middleware/error-handler";

// Import verification modules
import "@/lib/verification/formalVerification";

// Import termination modules
import "@/lib/termination/autonomousTermination";

// Import Supabase modules
import "@/lib/supabase/client";

// Test utilities are not imported in production builds to avoid Vitest conflicts

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const orbitron = Orbitron({
  variable: "--font-orbitron",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700", "800", "900"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                try {
                  var theme = localStorage.getItem('communitee-theme');
                  if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                  } else if (theme === 'light') {
                    document.documentElement.classList.remove('dark');
                  } else {
                    // Default to light theme if no preference is stored
                    document.documentElement.classList.remove('dark');
                  }
                } catch (e) {
                  // Fallback to light theme if localStorage is not available
                  document.documentElement.classList.remove('dark');
                }
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${orbitron.variable} antialiased`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="light"
          enableSystem={false}
          disableTransitionOnChange={false}
          storageKey="communitee-theme"
          themes={["light", "dark"]}
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}
